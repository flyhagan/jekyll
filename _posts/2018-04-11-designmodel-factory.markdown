﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿---layout: posttitle: The Best Organizer Softwaredate: 2018-04-11 00:00:00 +0300description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)img: software.jpg # Add image post (optional)tags: [Productivity, Software] # add tag--- # 设计模式 1.工厂类  接口类  ``public interface Sender{        public void sender();  }  ``  业务实现类1  ``public class MailSender implement Sender{       @Override       public void sender(){            System.out.println("I'm mail");      }  }  ``  //业务实现类2  ``public class SmsSender implement Sender{       @Override       public void sender(){            System.out.println("I'm sms");      }  } ``//1.1普通工厂类  ``public class Factory{      public Sender produce(String type){          if(type.equals("mail")){              return new MailSender();          }          if(type.equals("sms")){              return new SmsSender();          }else{              System.out.println("输入的值是错误的");          }     }    }   public class test{      public static void main(String args[]){          Factory factory = new Factory();          Sender sender = factory.produce("mail");          sender.sender();      }  }   ``  修改时只需要修改工厂类逻辑中的produce方法并添加业务逻辑实现类  //1.2多工厂类  ``public class Factory{      public Sender mailProduce(){          return new MailSender();      }      pubilc Sender smsProduce(){          return new SmsSender();      }  }  public class test{      public static void main(String args[]){          Factory factory = new Factory();          Sender sender = factory.mailProduce();          sender.sender();      }  }  ``  修改时只需要在工厂类中添加相关的返回类型方法，并添加业务逻辑实现类  //1.3静态工厂  ``pubilc class Factory{      public static Sender mailProduce(){          return new MailSender();      }      pubilc static Sender smsProduce(){          return new SmsSender();      }  }  public class test{      public static void main(String args[]){          Sender sender = Factory.mailProduce();          sender.sender();      }  }  ``由工厂类直接调用方法进行实现  # 总结  工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。